use gaia::expression::*;
use gaia::environment::L1Environment;

newline = #quiet<[\n\r]>
not_newline = !newline .

line_comment -> ()
    = "//" not_newline*

comment = #quiet<line_comment>

spaces = #quiet<[ \t]+>
ss = spaces*
whitespace = comment / #quiet<[ \n\r\t]+>
ws = whitespace*

dim_ -> () = "dim" ws
if_ -> () = "if" ws
then_ -> () = "then" ws
else_ -> () = "else" ws
true_ -> () = "true" ws
false_ -> () = "false" ws
where_ -> () = "where" ws
end_ -> () = "end" ws

powop_ = "^" ws
divop_ = "/" ws
mulop_ = "*" ws
addop_ = "+" ws
subop_ = "-" ws
gtop_ = ">" ws
gteqop_ = ">=" ws
ltop_ = "<" ws
lteqop_ = "<=" ws
eqop_ = "==" ws
neqop_ = "/=" ws
atop_ = "@" ws
queryop = "#."

larrow_ = "<-" ws
rarrow_thick_ = "=>" ws
comma_ = "," ws
lbrace_ = "{" ws
rbrace_ = "}" ws
lbracket_ = "(" ws
rbracket_ = ")" ws
lsquare_bracket_ = "[" ws
rsquare_bracket_ = "]" ws

keyword -> ()
    = "dim"
    / "if"
    / "then"
    / "else"
    / "true"
    / "false"
    / "where"
    / "end"

identifier -> L1Expression
    = !keyword id:$([a-zA-Z_]+) {
        L1Expression::Identifier(id.to_owned())
    }

pub boolean -> L1Expression
    = t:$(true_ / false_) {
        if t == "true" {
            L1Expression::Literal(Literal::Bool(true))
        } else {
            L1Expression::Literal(Literal::Bool(false))
        }
    }

pub integer -> L1Expression
    = i:$([0-9]+) {
        let x = i.parse::<u32>().unwrap();
        L1Expression::Literal(Literal::Int32(x))
    }

tuple_expression -> L1TupleExpression
    = e0:expression ss larrow_ e1:expression {
        L1TupleExpression {
            lhs: e0,
            rhs: e1,
        }
    }

tuple_expression_next -> L1TupleExpression
    = comma_ ten:tuple_expression {
        ten
    }

pub tuple_builder -> L1Expression
    = lsquare_bracket_ tei:tuple_expression ten:tuple_expression_next* rsquare_bracket_ {
        L1Expression::TupleBuilder([vec![tei], ten].concat())
    }

pub conditional -> L1Expression
    = if_ cond:expression then_ consequent:expression else_ alternate:expression {
        let if_expr = L1IfExpression {
            condition: cond,
            consequent: consequent,
            alternate: alternate,
        };
        L1Expression::If(Box::new(if_expr))
    }

pub base_abstraction -> L1Expression
    = "\\" ws formal_parameters:identifier+ ws "->" ws expr:expression {
        let base_expr = L1BaseAbstraction {
            formal_parameters: formal_parameters,
            body: expr,
        };
        L1Expression::BaseAbstraction(Box::new(base_expr))
    }

pub intension_expression_next -> L1Expression
    = comma_ ien:expression {
        ien
    }

pub intension_builder -> L1Expression
    = lbrace_ iei:expression* ien:intension_expression_next* rbrace_ expr:expression {
        let intens_expr = L1IntensionExpression {
            domain: [iei, ien].concat(),
            value: expr,
        };
        L1Expression::IntensionBuilder(Box::new(intens_expr))
    }

pub intension_application -> L1Expression
    = rarrow_thick_ ws expr:expression {
        L1Expression::IntensionApplication(Box::new(expr))
    }

pub query_expr -> L1Expression
    = expr:(identifier / expression_group) { 
        expr 
    }

pub query -> L1Expression
    = queryop expr:query_expr {
        L1Expression::Query(Box::new(expr))
    }

pub literal -> L1Expression
    = lit:(boolean / integer) {
        lit
    }

pub term -> L1Expression
    = ws term:(
          expression_group 
        / literal
        / query
        / tuple_builder 
        / intension_application 
        / conditional 
        / base_abstraction 
        / intension_builder 
        / identifier_or_function_application
        ) ws {
        term
    }

expression_group -> L1Expression
    = lbracket_ expr:expression rbracket_ {
        expr
    }

pub expression -> L1Expression
    = #infix<term> {
        #L x divop_ y {
            let op = L1Expression::Operator("/".to_string());
            L1Expression::Application(vec![op, x, y])
        }
        #L x mulop_ y {
            let op = L1Expression::Operator("*".to_string());
            L1Expression::Application(vec![op, x, y])
        }
        #L x addop_ y {
            let op = L1Expression::Operator("+".to_string());
            L1Expression::Application(vec![op, x, y])
        }
        #L x subop_ y {
            let op = L1Expression::Operator("-".to_string());
            L1Expression::Application(vec![op, x, y])
        }
        #L x gtop_ y {
            let op = L1Expression::Operator(">".to_string());
            L1Expression::Application(vec![op, x, y])
        }
        #L x gteqop_ y {
            let op = L1Expression::Operator(">=".to_string());
            L1Expression::Application(vec![op, x, y])
        }
        #L x ltop_ y {
            let op = L1Expression::Operator("<".to_string());
            L1Expression::Application(vec![op, x, y])
        }
        #L x lteqop_ y {
            let op = L1Expression::Operator("<=".to_string());
            L1Expression::Application(vec![op, x, y])
        }
        #L x eqop_ y {
            let op = L1Expression::Operator("==".to_string());
            L1Expression::Application(vec![op, x, y])
        }
        #L x atop_ y {
            let perturb_expr = L1PerturbExpression {
                lhs: x,
                rhs: y,
            };
            L1Expression::Perturb(Box::new(perturb_expr))
        }
        // #L x "." y {
        //     match x.clone() {
        //         L1Expression::Identifier(id) => {
        //             match id.as_ref() {
        //                 "#" =>
        //                     L1Expression::Query(Box::new(y)),
        //                 _ => {
        //                     let base_application = L1BaseApplication { lhs: x, rhs: y };
        //                     L1Expression::BaseApplication(Box::new(base_application))
        //                 }
        //             }
        //         },

        //         _ => {
        //             let base_application = L1BaseApplication { lhs: x, rhs: y };
        //             L1Expression::BaseApplication(Box::new(base_application))
        //         }
        //     }
        // }
    }

// dim x <- 0
pub dimension_declaration -> L1Expression
    = dim_ id:identifier ws larrow_ expr:expression {
        let decl = L1DeclarationExpression {
            lhs: id,
            tuple_builder: None,
            rhs: expr,
        };
        L1Expression::DimensionDeclaration(Box::new(decl))
    }

pub base_parameter -> L1Expression
    = "." param:identifier {
        param
    }

pub base_argument -> L1Expression
    = "." arg:identifier {
        arg
    }

pub value_parameter -> L1Expression
    = "!" param:identifier {
        param
    }

pub value_argument -> L1Expression
    = "!" arg:expression {
        arg
    }

pub name_parameter -> L1Expression
    = spaces param:identifier {
        param
    }

pub name_argument_expr -> L1Expression
    = expr:(identifier / literal / expression_group) {
        expr
    }

// ws here is problematic
pub name_argument -> L1Expression
    = whitespace arg:name_argument_expr {
        arg
    }

pub declaration -> L1Expression
    = dimension_declaration / function_or_variable_declaration / expression_where

pub identifier_or_function_application -> L1Expression
   = id:identifier bps:(base_argument)* vps:(value_argument)* nps:(name_argument)* {
       if bps.len() == 0 && vps.len() == 0 && nps.len() == 0 {
           id
       } else {
            // println!("function_application_id = {:?}", id.clone());
            // println!("function_application_base_args = {:?}", bps.clone());
            // println!("function_application_value_args = {:?}", vps.clone());
            // println!("function_application_name_args = {:?}", nps.clone());

            let app = L1FunctionApplication {
               lhs: id,
               base_args: bps,
               value_args: vps,
               name_args: nps,
            };
            L1Expression::FunctionApplication(Box::new(app))
       }
   }

// A = 0
// B [t <- 0] = 0
// B [t <- i] = prev.t X + 1
// f A = A
// f = n\ A -> A 
// f.d = d
// f = b\ d -> d
// f.d X = #.d + X
// f = b\ d -> n\ X -> #.d + X
pub function_or_variable_declaration -> L1Expression
    = id:identifier bps:(base_parameter)* vps:(value_parameter)* nps:(name_parameter)* ws tb:(tuple_builder)? "=" expr:expression_where {
        if bps.len() == 0 && vps.len() == 0 && nps.len() == 0 {
            // println!("variable_declaration = {:?}", id.clone());
            // println!("variable_expr = {:?}", expr.clone());

            let decl = L1DeclarationExpression {
                lhs: id,
                tuple_builder: tb,
                rhs: expr,
            };
            L1Expression::VariableDeclaration(Box::new(decl))
        } else {
            // println!("function_declaration = {:?}", id.clone());
            // println!("function_base_params = {:?}", bps.clone());
            // println!("function_value_params = {:?}", vps.clone());
            // println!("function_name_params = {:?}", nps.clone());
            // println!("function_expr = {:?}", expr.clone());

            let decl = L1FunctionDeclaration {
                name: id,
                base_parameters: bps,
                value_parameters: vps,
                name_parameters: nps,
                body: expr,
            };
            L1Expression::FunctionDeclaration(Box::new(decl))
        }
    }

pub where_clause -> Vec<L1Expression>
    = where_ scope:scope end_ {
      scope
    }

pub expression_where -> L1Expression
    = expr:expression wc:(where_clause)? {
    match wc {
        Some(exprs) => {
            let mut outer_dims: Vec<L1DimensionExpression> = vec![];
            let mut outer_vars: L1Environment = L1Environment::new();
            // for each expr in exprs
            for expr in exprs {
                match expr {
                    // collect dim declaration into wheredim
                    L1Expression::DimensionDeclaration(decl_expr) => {
                        let id = decl_expr.lhs.clone()
                            .expect_identifier();
                        let dim_expr = L1DimensionExpression {
                            lhs: id,
                            rhs: decl_expr.rhs.clone(),
                        };
                        outer_dims.push(dim_expr)
                    },

                    // collect let declaration into wherevar
                    L1Expression::VariableDeclaration(decl_expr) => {
                        let id = decl_expr.lhs.clone()
                            .expect_identifier();
                        outer_vars.define(id, decl_expr.rhs)
                    },

                    L1Expression::FunctionDeclaration(decl_expr) => {
                        let id = decl_expr.name.clone()
                            .expect_identifier();
                        let f = decl_expr.as_abstraction();
                        outer_vars.define(id, f.clone())
                    },

                    _ =>
                        panic!("Unexpected expression in grammar.")
                }
            }

            let e0 = if outer_vars.len() > 0 {
                let wv_expr = L1WhereVarExpression {
                    lhs: expr.clone(),
                    rhs: outer_vars.clone(),
                };
                Some(L1Expression::WhereVar(Box::new(wv_expr)))
            } else {
                None
            };

            let e1 = match e0 {
                Some(wv) => {
                    if outer_dims.len() > 0 {
                        let wd_expr = L1WhereDimExpression {
                            lhs: wv.clone(),
                            rhs: L1ContextExpression(outer_dims),
                        };
                        Some(L1Expression::WhereDim(Box::new(wd_expr)))
                    } else {
                        Some(wv)
                    }
                },

                None => {
                    if outer_dims.len() > 0 {
                        let wd_expr = L1WhereDimExpression {
                            lhs: expr.clone(),
                            rhs: L1ContextExpression(outer_dims),
                        };
                        Some(L1Expression::WhereDim(Box::new(wd_expr)))
                    } else {
                        None
                    }
                },
            };

            match e1 {
                Some(wd) => {
                    wd
                },

                None => expr.clone(),
            }
        },

        None => expr,
    }
}

pub scope -> Vec<L1Expression>
    = declaration+
